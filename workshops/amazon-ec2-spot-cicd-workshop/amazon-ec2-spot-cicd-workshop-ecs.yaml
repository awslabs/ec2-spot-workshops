AWSTemplateFormatVersion: "2010-09-09"

Description: A CloudFormation template that will deploy all AWS resources that are required to run the Amazon EC2 Spot CI/CD Workshop. This template is provided as-is under a modified MIT license - please see https://github.com/aws-samples/amazon-ec2-spot-cicd-workshop/blob/master/LICENSE

Parameters:
  KeyPair:
    Description: The Key Pair created earlier in the Preparation Lab
    Type: AWS::EC2::KeyPair::KeyName

  CurrentIP:
    Description: Your current IP address (used to limit access to SSH services on EC2 instances)
    Type: String
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\/([0-9]|[1-2][0-9]|3[0-2])$
    ConstraintDescription: must be specified in CIDR notation (e.g, 123.45.67.0/24)
    Default: 0.0.0.0/0

  JenkinsAdminPassword:
    Description: The password that you would like to use for the admin account in your Jenkins server (must be at least 8 characters)
    Type: String
    ConstraintDescription: must be at least 8 characters in length
    MinLength: 8
    NoEcho: true

  ECSAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

Resources:
  IAMRoleECS:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Policies:
        - PolicyName: JenkinsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeSpotFleetInstances
                  - ec2:ModifySpotFleetRequest
                  - ec2:CreateTags
                  - ec2:DescribeRegions
                  - ec2:DescribeInstances
                  - ec2:TerminateInstances
                  - ec2:DescribeInstanceStatus
                  - ec2:DescribeSpotFleetRequests
                Resource: "*"
              - Effect: Allow
                Action:
                  - autoscaling:DescribeAutoScalingGroups
                  - autoscaling:UpdateAutoScalingGroup
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:ListInstanceProfiles
                  - iam:ListRoles
                  - iam:PassRole
                Resource: "*"
      Path: /

  InstanceProfileECS:
    Type: AWS::IAM::InstanceProfile
    DependsOn: IAMRoleECS
    Properties:
      Path: "/"
      Roles:
        - !Ref IAMRoleECS

  IAMRoleECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole
      Path: /

  ECSServiceLinkedRole:
    Type: AWS::IAM::ServiceLinkedRole
    Properties:
      AWSServiceName: "ecs.amazonaws.com"
      Description: "Role to enable Amazon ECS to manage your cluster."

  VPC: # This is the VPC that the CI/CD environment will be running in
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/21
      EnableDnsHostnames: "true"
      EnableDnsSupport: "true"
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Amazon EC2 Spot CICD Workshop VPC

  SubnetPublicA: # The first of three subnets defined within the VPC...
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 192.168.0.0/24
      MapPublicIpOnLaunch: "true"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Amazon EC2 Spot CICD Workshop Public Subnet A

  SubnetPublicB: # ... and the second of three subnets...
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: 192.168.1.0/24
      MapPublicIpOnLaunch: "true"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Amazon EC2 Spot CICD Workshop Public Subnet B

  SubnetPublicC: # ... and the third of three subnets defined within the VPC
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      AvailabilityZone: !Select [2, !GetAZs ""]
      CidrBlock: 192.168.2.0/24
      MapPublicIpOnLaunch: "true"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Amazon EC2 Spot CICD Workshop Public Subnet C

  SubnetPrivateA: # The first of three subnets defined within the VPC...
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 192.168.3.0/24
      MapPublicIpOnLaunch: "true"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Amazon EC2 Spot CICD Workshop Private Subnet A
        - Key: Type
          Value: Private

  SubnetPrivateB: # ... and the second of three subnets...
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: 192.168.4.0/24
      MapPublicIpOnLaunch: "true"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Amazon EC2 Spot CICD Workshop Private Subnet B
        - Key: Type
          Value: Private

  SubnetPrivateC: # ... and the third of three subnets defined within the VPC
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      AvailabilityZone: !Select [2, !GetAZs ""]
      CidrBlock: 192.168.5.0/24
      MapPublicIpOnLaunch: "true"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Amazon EC2 Spot CICD Workshop Private Subnet C
        - Key: Type
          Value: Private

  InternetGateway: # Create an Internet Gateway in order to allow EC2 instances to be accessible via the Internet
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Amazon EC2 Spot CICD Workshop Internet Gateway

  InternetGatewayAttachment: # Once both the VPC and Internet Gateway have been created, attach the Internet Gateway to the VPC
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - InternetGateway
      - VPC
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  EIPNATGateway:
    Type: AWS::EC2::EIP
    DependsOn:
      - InternetGatewayAttachment
      - VPC
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn:
      - SubnetPublicA
    Properties:
      AllocationId: !GetAtt EIPNATGateway.AllocationId
      SubnetId: !Ref SubnetPublicA

  RouteTablePublic: # Create a route table which will be used within the VPC
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Amazon EC2 Spot CICD Workshop Public Route Table

  RouteTablePrivate: # Create a route table which will be used within the VPC
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Amazon EC2 Spot CICD Workshop Private Route Table

  DefaultRoutePublic: # Add a default route to the route table, pointing to the Internet Gateway
    Type: AWS::EC2::Route
    DependsOn:
      - RouteTablePublic
      - InternetGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTablePublic

  DefaultRoutePrivate: # Add a default route to the route table, pointing to the NAT Gateway
    Type: AWS::EC2::Route
    DependsOn:
      - RouteTablePrivate
      - NATGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref RouteTablePrivate

  SubnetPublicARouteTableAssociation: # Associate the route table with the first of the three subnets in the VPC...
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - RouteTablePublic
      - SubnetPublicA
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublicA

  SubnetPublicBRouteTableAssociation: # ... and the second of three subnets...
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - RouteTablePublic
      - SubnetPublicB
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublicB

  SubnetPublicCRouteTableAssociation: # ... and the third of the three subnets in the VPC
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - RouteTablePublic
      - SubnetPublicC
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublicC

  SubnetPrivateARouteTableAssociation: # Associate the route table with the first of the three subnets in the VPC...
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - RouteTablePrivate
      - SubnetPrivateA
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref SubnetPrivateA

  SubnetPrivateBRouteTableAssociation: # ... and the second of three subnets...
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - RouteTablePrivate
      - SubnetPrivateB
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref SubnetPrivateB

  SubnetPrivateCRouteTableAssociation: # ... and the third of the three subnets in the VPC
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - RouteTablePrivate
      - SubnetPrivateC
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref SubnetPrivateC

  SecurityGroupJenkins: # A Security Group that allows ingress access for SSH and the default port that a Jenkins Master will run on
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupName: Spot CICD Workshop Jenkins Security Group
      GroupDescription: A Security Group that allows ingress access for SSH and the default port that a Jenkins Master will run on
      SecurityGroupIngress:
        - Description: SSH access from the IP address that the workshop participant is using.
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref CurrentIP
        - Description: SSH access from hosts within the Spot CICD Workshop VPC - required for Build Agent deployments on to EC2 Spot instances.
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 192.168.0.0/21
        - Description: HTTP (8080) access from the IP address that the workshop participant is using.
          IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Ref CurrentIP
        - Description: HTTP (8080) access from hosts within the Spot CICD Workshop VPC, including the ALBs that reside in front of Jenkins, and Build Agents running on ECS nodes.
          IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 192.168.0.0/21
        - Description: JNLP (5000) access from hosts within the Spot CICD Workshop VPC - required for Build Agent deployments on ECS nodes to communicate back with the Jenkins Master container.
          IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          #CidrIp: 192.168.0.0/21
          # Limited CIDR commented out as we had an issue in the first re:Invent workshop that needs further investigation
          CidrIp: 0.0.0.0/0
        - Description: JNLP (50000) access from hosts within the Spot CICD Workshop VPC - the legacy port that used to be required for Build Agent deployments on ECS nodes to communicate back with the Jenkins Master container.
          IpProtocol: tcp
          FromPort: 50000
          ToPort: 50000
          #CidrIp: 192.168.0.0/21
          # Limited CIDR commented out as we had an issue in the first re:Invent workshop that needs further investigation
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  SecurityGroupJenkinsALB: # A Security Group that allows ingress access for HTTP on ALBs and used to access the Jenkins Master
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupName: Spot CICD Workshop Jenkins ALB Security Group
      GroupDescription: A Security Group that allows ingress access for HTTP on ALBs and used to access the Jenkins Master
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  SecurityGroupEFS:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - SecurityGroupJenkins
      - VPC
    Properties:
      GroupName: Spot CICD Workshop EFS Security Group
      GroupDescription: A Security Group that allows access to EFS volume targets from the Jenkins Securiy Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref SecurityGroupJenkins
      VpcId: !Ref VPC

  JenkinsMasterALB: # This is the Application Load Balancer that resides in front of your Jenkins Master instance and is responsible for port-mapping requests from TCP:80 to TCP:8080
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - SecurityGroupJenkinsALB
      - SubnetPublicA
      - SubnetPublicB
      - SubnetPublicC
    Properties:
      Name: JenkinsMasterALBECS
      Scheme: internet-facing
      SecurityGroups:
        - !Ref SecurityGroupJenkinsALB
      Subnets:
        - !Ref SubnetPublicA
        - !Ref SubnetPublicB
        - !Ref SubnetPublicC

  JenkinsMasterALBTargetGroupECS: # This is the Target Group used by the JenkinsMasterALB load balancer when Jenkins is running in a container on an ECS cluster
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - VPC
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: /login
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Name: JenkinsMasterECSTargetGroup
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      TargetGroupAttributes:
        - Key: "slow_start.duration_seconds"
          Value: "120"
      UnhealthyThresholdCount: 4
      VpcId: !Ref VPC

  JenkinsMasterALBListener: # This is the ALB Listener used to access the Jenkins Master
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - JenkinsMasterALB
      - JenkinsMasterALBTargetGroupECS
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref JenkinsMasterALBTargetGroupECS
      LoadBalancerArn: !Ref JenkinsMasterALB
      Port: 80
      Protocol: HTTP

  JenkinsMasterALBListenerRuleECS: # The ALB Listener rule that forwards all traffic destined for the Jenkins Master to the appropriate Target Group
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn:
      - JenkinsMasterALBListener
      - JenkinsMasterALBTargetGroupECS
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref JenkinsMasterALBTargetGroupECS
      Conditions:
        - Field: path-pattern
          Values:
            - "/*"
      ListenerArn: !Ref JenkinsMasterALBListener
      Priority: 2

  EFSJenkinsHomeVolume:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose

  EFSMountTargetJenkinsHomeVolumeA:
    Type: AWS::EFS::MountTarget
    DependsOn:
      - EFSJenkinsHomeVolume
      - SecurityGroupEFS
      - SubnetPublicA
    Properties:
      FileSystemId: !Ref EFSJenkinsHomeVolume
      SecurityGroups:
        - !Ref SecurityGroupEFS
      SubnetId: !Ref SubnetPublicA

  EFSMountTargetJenkinsHomeVolumeB:
    Type: AWS::EFS::MountTarget
    DependsOn:
      - EFSJenkinsHomeVolume
      - SecurityGroupEFS
      - SubnetPublicB
    Properties:
      FileSystemId: !Ref EFSJenkinsHomeVolume
      SecurityGroups:
        - !Ref SecurityGroupEFS
      SubnetId: !Ref SubnetPublicB

  EFSMountTargetJenkinsHomeVolumeC:
    Type: AWS::EFS::MountTarget
    DependsOn:
      - EFSJenkinsHomeVolume
      - SecurityGroupEFS
      - SubnetPublicC
    Properties:
      FileSystemId: !Ref EFSJenkinsHomeVolume
      SecurityGroups:
        - !Ref SecurityGroupEFS
      SubnetId: !Ref SubnetPublicC

  ECSLaunchTemplate: # This is a launch template that will be used to provision ECS cluster nodes
    Type: AWS::EC2::LaunchTemplate
    DependsOn:
      - EFSJenkinsHomeVolume
      - InstanceProfileECS
      - SecurityGroupJenkins
    Properties:
      LaunchTemplateName: ECSLaunchTemplate
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: "/dev/xvda"
            Ebs:
              DeleteOnTermination: "true"
              VolumeSize: 30
              VolumeType: gp2
        IamInstanceProfile:
          Name: !Ref InstanceProfileECS
        ImageId: !Ref ECSAMI
        InstanceType: t3.medium
        KeyName: !Ref KeyPair
        SecurityGroupIds:
          - !Ref SecurityGroupJenkins
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: "Jenkins ECS Cluster Instance"
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            # Register instance with ECS cluster
            echo ECS_CLUSTER=SpotCICDWorkshopECSCluster >> /etc/ecs/ecs.config
            # Install all pending updates to the system
            yum -y update
            # Install the nfs-utils package
            yum -y install nfs-utils
            # Create EFS mountpoint
            mkdir /mnt/efs
            mkdir /mnt/efs/jenkins_home
            # Mount the Jenkins EFS volume
            mount -t nfs -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 $(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone).${EFSJenkinsHomeVolume}.efs.eu-west-1.amazonaws.com:/ /mnt/efs/jenkins_home
            # Deploy the AWS CLI
            yum -y install unzip wget
            wget -q https://s3.amazonaws.com/aws-cli/awscli-bundle.zip -O ./awscli-bundle.zip
            unzip ./awscli-bundle.zip
            ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
            # Register a custom attribute for this ECS host to indicate if this is a spot instance or not
            yum -y install jq
            INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            INSTANCE_LIFECYCLE=$(/usr/local/bin/aws ec2 describe-instances --region eu-west-1 --instance-ids $INSTANCE_ID | jq .Reservations | jq .[0] | jq .Instances | jq .[0] | jq .InstanceLifecycle | tr -d \")
            echo ECS_INSTANCE_ATTRIBUTES={\"lifecycle\": \"$INSTANCE_LIFECYCLE\"} >> /etc/ecs/ecs.config
            # If this is a spot instance, ensure that container draining occurs prior to interruption
            if [ $INSTANCE_LIFECYCLE == spot ]
              then
                wget -q https://s3-us-west-2.amazonaws.com/amazon-ec2-spot-cicd-workshop/interruption_check.sh -O ./interruption_check.sh
                chmod +x ./interruption_check.sh
                nohup ./interruption_check.sh &>/dev/null &
            fi

  ASGOnDemand:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      VPCZoneIdentifier:
        - Ref: SubnetPublicA
        - Ref: SubnetPublicB
        - Ref: SubnetPublicC
      NewInstancesProtectedFromScaleIn: true
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandAllocationStrategy: lowest-price
          OnDemandBaseCapacity: 0
          OnDemandPercentageAboveBaseCapacity: 100
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId:
              Ref: ECSLaunchTemplate
            Version: !GetAtt ECSLaunchTemplate.LatestVersionNumber
          Overrides:
            - InstanceRequirements:
                VCpuCount:
                  Min: 2
                  Max: 8
                MemoryMiB:
                  Min: 4096
                CpuManufacturers:
                  - intel
      Tags:
        - Key: Name
          Value: "EC2OnDemandJenkinsECS"
          PropagateAtLaunch: true

  ECSCluster:
    Type: AWS::ECS::Cluster
    DependsOn: ECSServiceLinkedRole
    Properties:
      ClusterName: SpotCICDWorkshopECSCluster

  ECSCapacityProviderOD:
    Type: AWS::ECS::CapacityProvider
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref ASGOnDemand
        ManagedScaling:
          MaximumScalingStepSize: 1
          MinimumScalingStepSize: 1
          Status: ENABLED
          TargetCapacity: 100
        ManagedTerminationProtection: ENABLED

  ClusterCPAssociation:
    Type: "AWS::ECS::ClusterCapacityProviderAssociations"
    Properties:
      Cluster: !Ref ECSCluster
      CapacityProviders:
        - !Ref ECSCapacityProviderOD
      DefaultCapacityProviderStrategy:
        - Base: 1
          Weight: 100
          CapacityProvider: !Ref ECSCapacityProviderOD

  ECSTaskDefinitionJenkinsMaster:
    Type: AWS::ECS::TaskDefinition
    DependsOn: ECSServiceLinkedRole
    Properties:
      ContainerDefinitions:
        - Cpu: 512
          Essential: true
          Image: christianhxc/amazon-ec2-spot-cicd-workshop-jenkins:2.346.3
          Memory: 1536
          MountPoints:
            - SourceVolume: JENKINS_HOME
              ContainerPath: /var/jenkins_home
          Name: SpotCICDWorkshopJenkinsMasterContainer
          PortMappings:
            - ContainerPort: 5000
              HostPort: 5000
            - ContainerPort: 8080
              HostPort: 8080
            - ContainerPort: 50000
              HostPort: 50000
          Environment:
            - Name: "JENKINS_ADMIN_ID"
              Value: "admin"
            - Name: "JENKINS_ADMIN_PASSWORD"
              Value: !Ref JenkinsAdminPassword
          Privileged: true
          User: "root"
      ExecutionRoleArn: !GetAtt IAMRoleECS.Arn
      NetworkMode: awsvpc
      Volumes:
        - Host:
            SourcePath: /mnt/efs/jenkins_home
          Name: JENKINS_HOME

  ECSServiceJenkinsMaster:
    Type: AWS::ECS::Service
    DependsOn:
      - ECSCluster
      - ECSServiceLinkedRole
      - ECSTaskDefinitionJenkinsMaster
      - JenkinsMasterALBListenerRuleECS
      - ServiceDiscoveryJenkinsMaster
    Properties:
      Cluster: !Ref ECSCluster
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 50
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 120
      LoadBalancers:
        - ContainerName: SpotCICDWorkshopJenkinsMasterContainer
          ContainerPort: 8080
          TargetGroupArn: !Ref JenkinsMasterALBTargetGroupECS
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref SecurityGroupJenkins
          Subnets:
            - !Ref SubnetPrivateA
            - !Ref SubnetPrivateB
            - !Ref SubnetPrivateC
      ServiceRegistries:
        - ContainerName: SpotCICDWorkshopJenkinsMasterContainer
          RegistryArn: !GetAtt ServiceDiscoveryJenkinsMaster.Arn
      TaskDefinition: !Ref ECSTaskDefinitionJenkinsMaster

  ServiceDiscoveryJenkinsMasterNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    DependsOn: VPC
    Properties:
      Vpc: !Ref VPC
      Name: jenkins.local

  ServiceDiscoveryJenkinsMaster:
    Type: AWS::ServiceDiscovery::Service
    DependsOn: ServiceDiscoveryJenkinsMasterNamespace
    Properties:
      Description: Jenkins Master Service
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 60
        NamespaceId: !Ref ServiceDiscoveryJenkinsMasterNamespace
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: master

Outputs:
  EFSFileSystemID:
    Description: The file system ID of the EFS volume that is used to persist JENKINS_HOME across EC2 & ECS instances.
    Value: !Ref EFSJenkinsHomeVolume

  JenkinsDNSName:
    Description: The DNS name of the Application Load Balancer that is used to gain access to your Jenkins server.
    Value: !GetAtt JenkinsMasterALB.DNSName

  JenkinsMasterSecurityGroup:
    Description: Security Group for Jenkins nodes. Use this value to configure Jenkins ECS Plugin
    Value: !Ref SecurityGroupJenkins

  JenkinsVPCPrivateSubnets:
    Description: The private subnets where Jenkins will be deployed. Use this value to configure Jenkins Spot agents.
    Value:
      !Join [
        ",",
        [!Ref SubnetPrivateA, !Ref SubnetPrivateB, !Ref SubnetPrivateC],
      ]

  JenkinsVPCPublicSubnets:
    Description: The public subnets where Jenkins will be deployed. Use this value to configure Jenkins ECS plugin
    Value:
      !Join [",", [!Ref SubnetPublicA, !Ref SubnetPublicB, !Ref SubnetPublicC]]

  JenkinsMasterALBTargetGroupECS:
    Description: Target Group for Jenkins EC2 nodes.
    Value: !Ref JenkinsMasterALBTargetGroupECS
