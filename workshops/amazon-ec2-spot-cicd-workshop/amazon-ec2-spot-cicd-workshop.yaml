AWSTemplateFormatVersion: '2010-09-09'

Description: A CloudFormation template that will deploy all AWS resources that are required to run the Amazon EC2 Spot CI/CD Workshop. This template is provided as-is under a modified MIT license - please see https://github.com/aws-samples/amazon-ec2-spot-cicd-workshop/blob/master/LICENSE

Parameters: 
  KeyPair:
    Description: The Key Pair created earlier in the Preparation Lab
    Type: AWS::EC2::KeyPair::KeyName

  CurrentIP:
    Description: Your current IP address (used to limit access to SSH services on EC2 instances)
    Type: String
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\/([0-9]|[1-2][0-9]|3[0-2])$
    ConstraintDescription: must be specified in CIDR notation (e.g, 123.45.67.0/24)
    Default: 0.0.0.0/0

  JenkinsAdminPassword:
    Description: The password that you would like to use for the admin account in your Jenkins server (must be at least 8 characters)
    Type: String
    ConstraintDescription: must be at least 8 characters in length
    MinLength: 8
    NoEcho: true

Resources:

  IAMRoleAMILookupLambdaExecution: # IAM Role that allows the AMILookupLambdaFunction to look up the latest Amazon Linux AMI and write logs to CloudWatch Logs
    Type: AWS::IAM::Role
    # DependsOn: None
    # DependedOn: AMILookupLambdaFunction
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: AMILookupExecution
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action: ec2:DescribeImages
            Resource: "*"

  IAMRoleTestEnvironmentLambdaExecution:
    Type: AWS::IAM::Role
    DependsOn: 
    - DynamoDBTestEnvironmentTable
    - IAMRoleTestEnvironmentCloudFormation
    # DependedOn: TestEnvironmentLambdaFunction
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: TestEnvironmentExecution
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action: 
            - dynamodb:getItem
            - dynamodb:putItem
            Resource: !GetAtt DynamoDBTestEnvironmentTable.Arn
          - Effect: Allow
            Action:
            - cloudformation:createStack
            - cloudformation:deleteStack
            Resource: "*"
          - Effect: Allow
            Action:
            - iam:PassRole
            Resource: !GetAtt IAMRoleTestEnvironmentCloudFormation.Arn

  IAMRoleTestEnvironmentCloudFormation:
    Type: AWS::IAM::Role
    DependsOn: AMILookupLambdaFunction
    #DependedOn: None
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal: 
            Service:
            - cloudformation.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: TestEnvironmentDeployment
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - ec2:*
            - elasticloadbalancing:CreateListener
            - elasticloadbalancing:CreateLoadBalancer
            - elasticloadbalancing:CreateRule
            - elasticloadbalancing:CreateTargetGroup
            - elasticloadbalancing:DeleteTargetGroup
            - elasticloadbalancing:DeleteListener
            - elasticloadbalancing:DeleteLoadBalancer
            - elasticloadbalancing:DeleteRule
            - elasticloadbalancing:DescribeListeners
            - elasticloadbalancing:DescribeLoadBalancers
            - elasticloadbalancing:DescribeRules
            - elasticloadbalancing:DescribeTargetGroups
            - elasticloadbalancingv2:CreateListener
            - elasticloadbalancingv2:CreateLoadBalancer
            - elasticloadbalancingv2:CreateRule
            - elasticloadbalancingv2:CreateTargetGroup
            - elasticloadbalancingv2:DeleteListener
            - elasticloadbalancingv2:DeleteLoadBalancer
            - elasticloadbalancingv2:DeleteTargetGroup
            - elasticloadbalancingv2:DeleteRule
            - elasticloadbalancingv2:DescribeListeners
            - elasticloadbalancingv2:DescribeLoadBalancers
            - elasticloadbalancingv2:DescribeRules
            - elasticloadbalancingv2:DescribeTargetGroups
            - iam:AddRoleToInstanceProfile
            - iam:CreateRole
            - iam:CreateInstanceProfile
            - iam:DeleteInstanceProfile
            - iam:DeleteRole
            - iam:DeleteRolePolicy
            - iam:ListInstanceProfiles
            - iam:ListRoles
            - iam:PassRole
            - iam:PutRolePolicy
            - iam:RemoveRoleFromInstanceProfile
            Resource: "*"
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: !GetAtt AMILookupLambdaFunction.Arn

  IAMRoleJenkins:
    Type: AWS::IAM::Role
    DependsOn: 
    - DeploymentArtifactsS3Bucket
    - TestEnvironmentLambdaFunction
    # DependedOn: InstanceProfileJenkins
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - ecs-tasks.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: JenkinsPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: s3:*
            Resource: !Sub "arn:aws:s3:::${DeploymentArtifactsS3Bucket}/*"
          - Effect: Allow
            Action: lambda:invokeFunction
            Resource: !GetAtt TestEnvironmentLambdaFunction.Arn

  InstanceProfileJenkins:
    Type: AWS::IAM::InstanceProfile
    DependsOn: IAMRoleJenkins
    # DependedOn: JenkinsOnDemandEC2Instance
    Properties:
      Path: '/'
      Roles:
      - !Ref IAMRoleJenkins

  IAMUserJenkins:
    Type: AWS::IAM::User
    # DependsOn: None
    # DependedOn: None
    Properties:
      Policies:
      - PolicyName: SpotAgentPolicy
        # Policy is documented at https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-requests.html#spot-fleet-iam-users
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - ec2:*
            - iam:ListInstanceProfiles
            - iam:ListRoles
            - iam:PassRole
            Resource: "*"
      - PolicyName: ECSAgentPolicy
        # Policy is documented at https://wiki.jenkins.io/display/JENKINS/Amazon+EC2+Container+Service+Plugin
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - ecs:DescribeContainerInstances
            - ecs:DescribeTaskDefinition
            - ecs:ListClusters
            - ecs:ListTaskDefinitions
            - ecs:RegisterTaskDefinition
            Resource: "*"
          - Effect: Allow
            Action:
            - ecs:ListContainerInstances
            - ecs:StopTask
            Resource: !GetAtt ECSCluster.Arn
          - Effect: Allow
            Action:
            - ecs:RunTask
            Resource: !Join
            - ''
            - - 'arn:aws:ecs:'
              - !Ref AWS::Region
              - ':'
              - !Ref AWS::AccountId
              - ':task-definition/SpotCICDWorkshopECSAgents-ECSBuildAgent:*'
          - Effect: Allow
            Action:
            - ecs:DescribeTasks
            - ecs:StopTask
            Resource: !Join
            - ''
            - - 'arn:aws:ecs:'
              - !Ref AWS::Region
              - ':'
              - !Ref AWS::AccountId
              - ':task/*'
      UserName: SpotCICDWorkshopJenkins

  IAMRoleECS:
    Type: AWS::IAM::Role
    # DependsOn: None
    # DependedOn: InstanceProfileECS
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Policies:
      - PolicyName: EC2DescribeInstances
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: ec2:DescribeInstances
            Resource: "*"
      Path: /

  InstanceProfileECS:
    Type: AWS::IAM::InstanceProfile
    DependsOn: IAMRoleECS
    # DependedOn: AutoScalingECSLaunchConfiguration
    Properties:
      Path: '/'
      Roles:
      - !Ref IAMRoleECS

  IAMRoleECSServiceRole:
    Type: AWS::IAM::Role
    # DependsOn:
    # DependedOn: ECSServiceJenkinsMaster
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole
      Path: /

  ECSServiceLinkedRole:
    Type: AWS::IAM::ServiceLinkedRole
    Properties:
      AWSServiceName: "ecs.amazonaws.com"
      Description: "Role to enable Amazon ECS to manage your cluster."

  DeploymentArtifactsS3Bucket: # This is an S3 bucket where the deployment artifacts will be uploaded to
    # DependsOn: None
    # DependedOn: IAMRoleJenkins
    Type: AWS::S3::Bucket

  VPC: # This is the VPC that the CI/CD environment will be running in
    Type: AWS::EC2::VPC
    # DependsOn: None
    # DependedOn: InternetGatewayAttachment, JenkinsMasterALBTargetGroupEC2, JenkinsMasterALBTargetGroupECS, RouteTable, SecurityGroupJenkins, SecurityGroupJenkinsALB, SubnetPublicA, SubnetPublicA, SubnetPublicC, 
    Properties:
      CidrBlock: 192.168.0.0/21
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: Amazon EC2 Spot CICD Workshop VPC

  SubnetPublicA: # The first of three subnets defined within the VPC...
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    # DependedOn: SubnetPublicARouteTableAssociation
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      CidrBlock: 192.168.0.0/24
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Amazon EC2 Spot CICD Workshop Public Subnet A

  SubnetPublicB: # ... and the second of three subnets...
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    # DependedOn: SubnetPublicBRouteTableAssociation
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      CidrBlock: 192.168.1.0/24
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Amazon EC2 Spot CICD Workshop Public Subnet B

  SubnetPublicC: # ... and the third of three subnets defined within the VPC
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    # DependedOn: SubnetPublicCRouteTableAssociation
    Properties:
      AvailabilityZone: !Select [ 2, !GetAZs "" ]
      CidrBlock: 192.168.2.0/24
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Amazon EC2 Spot CICD Workshop Public Subnet C

  SubnetPrivateA: # The first of three subnets defined within the VPC...
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    # DependedOn: SubnetPrivateARouteTableAssociation
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      CidrBlock: 192.168.3.0/24
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Amazon EC2 Spot CICD Workshop Private Subnet A

  SubnetPrivateB: # ... and the second of three subnets...
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    # DependedOn: SubnetPrivateARouteTableAssociation
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      CidrBlock: 192.168.4.0/24
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Amazon EC2 Spot CICD Workshop Private Subnet B

  SubnetPrivateC: # ... and the third of three subnets defined within the VPC
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    # DependedOn: SubnetPrivateCRouteTableAssociation
    Properties:
      AvailabilityZone: !Select [ 2, !GetAZs "" ]
      CidrBlock: 192.168.5.0/24
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Amazon EC2 Spot CICD Workshop Private Subnet C

  InternetGateway: # Create an Internet Gateway in order to allow EC2 instances to be accessible via the Internet
    Type: AWS::EC2::InternetGateway
    # DependsOn: None
    # DependedOn: InternetGatewayAttachment
    Properties:
      Tags:
      - Key: Name
        Value: Amazon EC2 Spot CICD Workshop Internet Gateway

  InternetGatewayAttachment: # Once both the VPC and Internet Gateway have been created, attach the Internet Gateway to the VPC
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: 
    - InternetGateway
    - VPC
    # DependedOn: DefaultRoute
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  EIPNATGateway:
    Type: AWS::EC2::EIP
    DependsOn: 
    - InternetGatewayAttachment
    - VPC
    # DependedOn: NATGateway
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn:
    - SubnetPublicA
    # DependedOn:
    Properties:
      AllocationId: !GetAtt EIPNATGateway.AllocationId
      SubnetId: !Ref SubnetPublicA

  RouteTablePublic: # Create a route table which will be used within the VPC
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    # DependedOn: DefaultRoutePublic, SubnetPublicARouteTableAssociation, SubnetPublicBRouteTableAssociation, SubnetPublicCRouteTableAssociation
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Amazon EC2 Spot CICD Workshop Public Route Table

  RouteTablePrivate: # Create a route table which will be used within the VPC
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    # DependedOn: DefaultRoute, SubnetPrivateARouteTableAssociation, SubnetPrivateBRouteTableAssociation, SubnetPrivateCRouteTableAssociation
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Amazon EC2 Spot CICD Workshop Private Route Table

  DefaultRoutePublic: # Add a default route to the route table, pointing to the Internet Gateway
    Type: AWS::EC2::Route
    DependsOn: 
    - RouteTablePublic
    - InternetGatewayAttachment
    # DependedOn: None
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTablePublic

  DefaultRoutePrivate: # Add a default route to the route table, pointing to the NAT Gateway
    Type: AWS::EC2::Route
    DependsOn: 
    - RouteTablePrivate
    - NATGateway
    # DependedOn: None
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref RouteTablePrivate

  SubnetPublicARouteTableAssociation: # Associate the route table with the first of the three subnets in the VPC...
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: 
    - RouteTablePublic
    - SubnetPublicA
    # DependedOn: None
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublicA

  SubnetPublicBRouteTableAssociation: # ... and the second of three subnets...
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: 
    - RouteTablePublic
    - SubnetPublicB
    # DependedOn: None
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublicB

  SubnetPublicCRouteTableAssociation: # ... and the third of the three subnets in the VPC
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: 
    - RouteTablePublic
    - SubnetPublicC
    # DependedOn: None
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublicC

  SubnetPrivateARouteTableAssociation: # Associate the route table with the first of the three subnets in the VPC...
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: 
    - RouteTablePrivate
    - SubnetPrivateA
    # DependedOn: None
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref SubnetPrivateA

  SubnetPrivateBRouteTableAssociation: # ... and the second of three subnets...
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: 
    - RouteTablePrivate
    - SubnetPrivateB
    # DependedOn: None
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref SubnetPrivateB

  SubnetPrivateCRouteTableAssociation: # ... and the third of the three subnets in the VPC
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: 
    - RouteTablePrivate
    - SubnetPrivateC
    # DependedOn: None
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref SubnetPrivateC

  SecurityGroupJenkins: # A Security Group that allows ingress access for SSH and the default port that a Jenkins Master will run on
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    # DependedOn: JenkinsOnDemandEC2Instance
    Properties:
      GroupName: Spot CICD Workshop Jenkins Security Group
      GroupDescription: A Security Group that allows ingress access for SSH and the default port that a Jenkins Master will run on
      SecurityGroupIngress:
      - Description: SSH access from the IP address that the workshop participant is using.
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref CurrentIP
      - Description: SSH access from hosts within the Spot CICD Workshop VPC - required for Build Agent deployments on to EC2 Spot instances.
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 192.168.0.0/21
      - Description: HTTP (8080) access from the IP address that the workshop participant is using.
        IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: !Ref CurrentIP
      - Description: HTTP (8080) access from hosts within the Spot CICD Workshop VPC, including the ALBs that reside in front of Jenkins, and Build Agents running on ECS nodes.
        IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 192.168.0.0/21
      - Description: JNLP (5000) access from hosts within the Spot CICD Workshop VPC - required for Build Agent deployments on ECS nodes to communicate back with the Jenkins Master container. 
        IpProtocol: tcp
        FromPort: 5000
        ToPort: 5000
        #CidrIp: 192.168.0.0/21 
        # Limited CIDR commented out as we had an issue in the first re:Invent workshop that needs further investigation
        CidrIp: 0.0.0.0/0
      - Description: JNLP (50000) access from hosts within the Spot CICD Workshop VPC - the legacy port that used to be required for Build Agent deployments on ECS nodes to communicate back with the Jenkins Master container. 
        IpProtocol: tcp
        FromPort: 50000
        ToPort: 50000
        #CidrIp: 192.168.0.0/21 
        # Limited CIDR commented out as we had an issue in the first re:Invent workshop that needs further investigation
        CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  SecurityGroupJenkinsALB: # A Security Group that allows ingress access for HTTP on ALBs and used to access the Jenkins Master
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    # DependedOn: JenkinsMasterALB
    Properties:
      GroupName: Spot CICD Workshop Jenkins ALB Security Group
      GroupDescription: A Security Group that allows ingress access for HTTP on ALBs and used to access the Jenkins Master
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  SecurityGroupEFS:
    Type: AWS::EC2::SecurityGroup
    DependsOn: 
    - SecurityGroupJenkins
    - VPC
    # DependedOn: EFSMountTargetJenkinsHomeVolumeA, EFSMountTargetJenkinsHomeVolumeB, EFSMountTargetJenkinsHomeVolumeC
    Properties:
      GroupName: Spot CICD Workshop EFS Security Group
      GroupDescription: A Security Group that allows access to EFS volume targets from the Jenkins Securiy Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 2049
        ToPort: 2049
        SourceSecurityGroupId: !Ref SecurityGroupJenkins
      VpcId: !Ref VPC

  AMILookupLambdaFunction: # A Lambda function that will be used to look up the AMI for the latest Amazon Linux AMI. The source code for this Lambda function can be obtained at https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/walkthrough-custom-resources-lambda-lookup-amiids.html.
    Type: AWS::Lambda::Function
    DependsOn: IAMRoleAMILookupLambdaExecution
    #DependedOn: EC2AMILookupCustomResource, ECSAMILookupCustomResource
    Properties:
      Code:
        S3Bucket: !Sub amazon-ec2-spot-cicd-workshop-${AWS::Region}
        S3Key: amilookup.zip
      Handler: amilookup.handler
      Role: !GetAtt IAMRoleAMILookupLambdaExecution.Arn
      Runtime: nodejs8.10
      Timeout: 30

  EC2AMILookupCustomResource: # A custom resource that provides the latest Amazon Linux AMI via EC2AMILookupCustomResource.Id
    Type: Custom::AMILookup
    DependsOn: AMILookupLambdaFunction
    # DependedOn:
    Properties:
      Architecture: HVM64
      Region: !Ref AWS::Region
      ServiceToken: !GetAtt AMILookupLambdaFunction.Arn

  ECSAMILookupCustomResource: # A custom resource that provides the latest Amazon ECS-Optimized AMI via ECSAMILookupCustomResource.Id
    Type: Custom::AMILookup
    DependsOn: AMILookupLambdaFunction
    # DependedOn:
    Properties:
      Architecture: ECSHVM64
      Region: !Ref AWS::Region
      ServiceToken: !GetAtt AMILookupLambdaFunction.Arn

  TestEnvironmentLambdaFunction: # A Lambda function that will be used to create and destroy buld testing environments.
    DependsOn: 
    - AMILookupLambdaFunction
    - DeploymentArtifactsS3Bucket
    - DynamoDBTestEnvironmentTable
    - IAMRoleTestEnvironmentLambdaExecution
    - SubnetPublicA
    - SubnetPublicB
    - SubnetPublicC
    - VPC
    #DependedOn: None
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SpotCICDWorkshop_ManageTestEnvironment
      Description: Handles the deployment and termination of Test Environments witin the Spot CICD Workshop.
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt IAMRoleTestEnvironmentLambdaExecution.Arn
      Runtime: nodejs8.10
      Timeout: 60
      Code:
        ZipFile: !Sub |
          'use strict';
          var AWS = require('aws-sdk');
          var actions = {
            deploy: function (cfn, ddb, request_payload) {
              return new Promise(function (resolve, reject) {
                var cfn_params = {
                  StackName: request_payload.stackName,
                  Capabilities: [ 'CAPABILITY_IAM' ],
                  Parameters: [
                    {
                      ParameterKey: 'KeyPair',
                      ParameterValue: '${KeyPair}'
                    }, {
                      ParameterKey: 'CurrentIP',
                      ParameterValue: '${CurrentIP}'
                    }, {
                      ParameterKey: 'AMILookupLambdaFunctionARN',
                      ParameterValue: '${AMILookupLambdaFunction.Arn}'
                    }, {
                      ParameterKey: 'DeploymentArtifactsS3Bucket',
                      ParameterValue: '${DeploymentArtifactsS3Bucket}'
                    }, {
                      ParameterKey: 'VPC',
                      ParameterValue: '${VPC}'
                    }, {
                      ParameterKey: 'SubnetA',
                      ParameterValue: '${SubnetPublicA}'
                    }, {
                      ParameterKey: 'SubnetB',
                      ParameterValue: '${SubnetPublicB}'
                    }, {
                      ParameterKey: 'SubnetC',
                      ParameterValue: '${SubnetPublicC}'
                    }
                  ],
                  RoleARN: '${IAMRoleTestEnvironmentCloudFormation.Arn}',
                  TemplateURL: 'https://s3-us-west-2.amazonaws.com/amazon-ec2-spot-cicd-workshop/amazon-ec2-spot-cicd-workshop_game-of-life.yaml'
                };
                cfn.createStack(cfn_params, function(err, cfn_data) {
                  if (err) { return reject(err); }
                  console.log('[INFO]', 'StackId: ', cfn_data.StackId);
                  return new Promise(function (resolve, reject) {
                    var ddb_params = {
                      Item: {
                        'JobBaseName': { S: request_payload.jobBaseName },
                        'BuildID': { N: request_payload.buildId },
                        'CloudFormationStackID': { S: cfn_data.StackId }
                      },
                      ReturnConsumedCapacity: 'TOTAL',
                      TableName: '${DynamoDBTestEnvironmentTable}'
                    };
                    ddb.putItem(ddb_params, function(err, ddb_data) {
                      if (err) { return reject(err); }
                      console.log('[INFO]', 'Consumed Capacity Units: ', ddb_data.ConsumedCapacity.CapacityUnits);
                      return resolve();
                    }); 
                  });
                });
              });
            },
            terminate: function(cfn, ddb, request_payload) {
              return new Promise(function (resolve, reject) {
                var ddb_params = {
                  Key: {
                    'JobBaseName': { S: request_payload.jobBaseName },
                    'BuildID': { N: request_payload.buildId }
                  },
                  TableName: '${DynamoDBTestEnvironmentTable}'
                };
                ddb.getItem(ddb_params, function(err, ddb_data) {
                  if (err) { return reject(err); }
                  console.log('[INFO]', 'CloudFormationStackId: ', ddb_data.Item.CloudFormationStackID.S);
                  return new Promise(function (resolve, reject) {
                    var cfn_params = {
                      StackName: request_payload.stackName,
                      RoleARN: '${IAMRoleTestEnvironmentCloudFormation.Arn}'
                    };
                    cfn.deleteStack(cfn_params, function(err, cfn_data) {
                      if (err) { return reject(err); }
                      return resolve();
                    });
                  });
                });
              });
            }
          };
          exports.handler = function (event, context, callback) {
            var p = actions[event.action];
            if (!p) {
              return callback('Unknown action');
            }
            var msgAction = event.action.toUpperCase() + ' ';
            var cfn = new AWS.CloudFormation();
            var ddb = new AWS.DynamoDB();
            console.log('[INFO]', 'Attempting', msgAction);
            return p(cfn, ddb, event).then(function (data) {
              return callback(null, data);
            }).catch(function (err) {
              console.log('[ERROR]', JSON.stringify(err));
              return callback(err);
            });
          };         

  JenkinsOnDemandEC2Instance: # This workshop starts from a baseline where we have a Jenkins server running on an on-demand EC2 instance. This resource launches and bootstraps this server
    Type: AWS::EC2::Instance
    DependsOn:
    - EC2AMILookupCustomResource 
    - InstanceProfileJenkins
    - SecurityGroupJenkins
    - SubnetPublicA
    # DependedOn: JenkinsMasterALBTargetGroupEC2
    Properties:
      BlockDeviceMappings:
      - DeviceName: "/dev/xvda"
        Ebs:
          DeleteOnTermination: 'true'
          VolumeSize: 8
          VolumeType: gp2
      IamInstanceProfile: !Ref InstanceProfileJenkins
      ImageId: !GetAtt EC2AMILookupCustomResource.Id
      InstanceType: t3.medium
      KeyName: !Ref KeyPair
      SecurityGroupIds:
      - !Ref SecurityGroupJenkins
      SubnetId: !Ref SubnetPublicA
      Tags:
      - Key: Name
        Value: Jenkins Master (On-demand)
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Install all pending updates to the system
          yum -y update
          # Configure YUM to be able to access official Jenkins RPM packages
          wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
          # Import the Jenkins repository public key
          rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
          # Configure YUM to be able to access contributed Maven RPM packages
          wget http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo -O /etc/yum.repos.d/epel-apache-maven.repo
          # Update the release version in the Maven repository configuration for this mainline release of Amazon Linux
          sed -i s/\$releasever/6/g /etc/yum.repos.d/epel-apache-maven.repo
          # Install the Java 8 SDK, Git, Jenkins and Maven
          yum -y install java-1.8.0-openjdk java-1.8.0-openjdk-devel jenkins git apache-maven
          # Set the default version of java to run out of the Java 8 SDK path (required by Jenkins)
          update-alternatives --set java /usr/lib/jvm/jre-1.8.0-openjdk.x86_64/bin/java
          update-alternatives --set javac /usr/lib/jvm/java-1.8.0-openjdk.x86_64/bin/javac
          # Restore the pre-staged copy of JENKINS_HOME used by this workshop
          mv /var/lib/jenkins /var/lib/jenkins_orig
          mkdir /var/lib/jenkins
          chown jenkins:jenkins /var/lib/jenkins
          wget -q -O /var/lib/jenkins/jenkins_home.tar.gz https://s3-us-west-2.amazonaws.com/amazon-ec2-spot-cicd-workshop/jenkins_home.tar.gz
          tar -zxf /var/lib/jenkins/jenkins_home.tar.gz -C /var/lib/jenkins/
          # Reset the password for the spotcicdworkshop user in Jenkins to the password defined as the JenkinsAdminPassword
          echo -n '${JenkinsAdminPassword}{spot}' | sha256sum | awk '{print $1;}' | xargs -I {} sed -i 's/jbcrypt:$2a$10$21qSY20aYvtAFeWA0yL8AezRox5bExGclhtaFatOokyYWe7CxbRfm/spot:{}/' /var/lib/jenkins/users/spotcicdworkshop/config.xml
          # Configure the Jenkins Location
          curl -s http://169.254.169.254/latest/meta-data/public-ipv4 | xargs -I {} sed -i 's/203.0.113.0/{}/' /var/lib/jenkins/jenkins.model.JenkinsLocationConfiguration.xml 
          # Start the Jenkins service
          service jenkins start

  JenkinsMasterALB: # This is the Application Load Balancer that resides in front of your Jenkins Master instance and is responsible for port-mapping requests from TCP:80 to TCP:8080
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: 
    - SecurityGroupJenkinsALB
    - SubnetPublicA
    - SubnetPublicB
    - SubnetPublicC
    # DependedOn: JenkinsMasterALBListener
    Properties:
      Name: JenkinsMasterALB
      Scheme: internet-facing
      SecurityGroups:
      - !Ref SecurityGroupJenkinsALB
      Subnets:
      - !Ref SubnetPublicA
      - !Ref SubnetPublicB
      - !Ref SubnetPublicC

  JenkinsMasterALBTargetGroupEC2: # This is the Target Group used by the JenkinsMasterALB load balancer when Jenkins is running on an EC2 instance
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: 
    - JenkinsOnDemandEC2Instance
    - VPC
    # DependedOn: JenkinsMasterALBListener, JenkinsMasterALBListenerRule
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: /login
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Name: JenkinsMasterEC2TargetGroup
      Port: 8080
      Protocol: HTTP
      Targets:
      - Id: !Ref JenkinsOnDemandEC2Instance
        Port: 8080
      UnhealthyThresholdCount: 4
      VpcId: !Ref VPC

  JenkinsMasterALBTargetGroupECS: # This is the Target Group used by the JenkinsMasterALB load balancer when Jenkins is running in a container on an ECS cluster
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: 
    - VPC
    # DependedOn: JenkinsMasterALBListener, JenkinsMasterALBListenerRule
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: /login
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Name: JenkinsMasterECSTargetGroup
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      UnhealthyThresholdCount: 4
      VpcId: !Ref VPC

  JenkinsMasterALBListener: # This is the ALB Listener used to access the Jenkins Master
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: 
    - JenkinsMasterALB 
    - JenkinsMasterALBTargetGroupEC2
    # DepenededOn: None
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref JenkinsMasterALBTargetGroupEC2
      LoadBalancerArn: !Ref JenkinsMasterALB
      Port: 80
      Protocol: HTTP

  JenkinsMasterALBListenerRuleEC2: # The ALB Listener rule that forwards all traffic destined for the Jenkins Master to the appropriate Target Group
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: 
    - JenkinsMasterALBListener
    - JenkinsMasterALBTargetGroupEC2
    # DependedOn: None
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref JenkinsMasterALBTargetGroupEC2
      Conditions:
      - Field: path-pattern
        Values:
        - "/*"
      ListenerArn: !Ref JenkinsMasterALBListener
      Priority: 1

  JenkinsMasterALBListenerRuleECS: # The ALB Listener rule that forwards all traffic destined for the Jenkins Master to the appropriate Target Group
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: 
    - JenkinsMasterALBListener
    - JenkinsMasterALBTargetGroupECS
    # DependedOn: None
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref JenkinsMasterALBTargetGroupECS
      Conditions:
      - Field: path-pattern
        Values:
        - "/*"
      ListenerArn: !Ref JenkinsMasterALBListener
      Priority: 2

  JenkinsSpotMasterLaunchTemplate: # This is a launch template that will be used to provision Jenkins Master servers - showing how when used in conjunction with an EFS volume stateful applications can run on self-healing spot architectures.
    Type: AWS::EC2::LaunchTemplate
    DependsOn:
    - EC2AMILookupCustomResource
    - EFSJenkinsHomeVolume
    - InstanceProfileJenkins
    - SecurityGroupJenkins
    # DependedOn: None
    Properties:
      LaunchTemplateName: JenkinsMasterLaunchTemplate
      LaunchTemplateData:
        BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize: 8
            VolumeType: gp2
        IamInstanceProfile: 
          #Arn: !GetAtt InstanceProfileJenkins.Arn
          Name: !Ref InstanceProfileJenkins
        ImageId: !GetAtt EC2AMILookupCustomResource.Id
        InstanceType: t3.medium
        KeyName: !Ref KeyPair
        SecurityGroupIds:
        - !Ref SecurityGroupJenkins
        TagSpecifications:
        - ResourceType: instance
          Tags:
          - Key: Name
            Value: Jenkins Master (Spot)
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            # Install all pending updates to the system
            yum -y update
            # Configure YUM to be able to access official Jenkins RPM packages
            wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
            # Import the Jenkins repository public key
            rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
            # Configure YUM to be able to access contributed Maven RPM packages
            wget http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo -O /etc/yum.repos.d/epel-apache-maven.repo
            # Update the release version in the Maven repository configuration for this mainline release of Amazon Linux
            sed -i s/\$releasever/6/g /etc/yum.repos.d/epel-apache-maven.repo
            # Install the Java 8 SDK, Git, Jenkins and Maven
            yum -y install java-1.8.0-openjdk java-1.8.0-openjdk-devel git jenkins apache-maven
            # Set the default version of java to run out of the Java 8 SDK path (required by Jenkins)
            update-alternatives --set java /usr/lib/jvm/jre-1.8.0-openjdk.x86_64/bin/java
            update-alternatives --set javac /usr/lib/jvm/java-1.8.0-openjdk.x86_64/bin/javac
            # Mount the Jenkins EFS volume at JENKINS_HOME
            mount -t nfs -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 $(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone).${EFSJenkinsHomeVolume}.efs.eu-west-1.amazonaws.com:/ /var/lib/jenkins
            # Start the Jenkins service
            service jenkins start

  JenkinsSpotAgentLaunchTemplate: # This is a launch template that will be used to provision Jenkins build agents - showing how spot instances can be used to scale-out build jobs at low cost.
    Type: AWS::EC2::LaunchTemplate
    DependsOn:
    - EC2AMILookupCustomResource
    - InstanceProfileJenkins
    - SecurityGroupJenkins
    # DependedOn: None
    Properties:
      LaunchTemplateName: JenkinsBuildAgentLaunchTemplate
      LaunchTemplateData:
        BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize: 8
            VolumeType: gp2
        IamInstanceProfile: 
          #Arn: !GetAtt InstanceProfileJenkins.Arn
          Name: !Ref InstanceProfileJenkins
        ImageId: !GetAtt EC2AMILookupCustomResource.Id
        InstanceType: t3.small
        KeyName: !Ref KeyPair
        SecurityGroupIds:
        - !Ref SecurityGroupJenkins
        TagSpecifications:
        - ResourceType: instance
          Tags:
          - Key: Name
            Value: Jenkins Build Agent
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            # Install all pending updates to the system
            yum -y update
            # Configure YUM to be able to access contributed Maven RPM packages
            wget http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo -O /etc/yum.repos.d/epel-apache-maven.repo
            # Update the release version in the Maven repository configuration for this mainline release of Amazon Linux
            sed -i s/\$releasever/6/g /etc/yum.repos.d/epel-apache-maven.repo
            # Install the Java 8 SDK, Git and Maven
            yum -y install java-1.8.0-openjdk java-1.8.0-openjdk-devel git apache-maven
            # Set the default version of java to run out of the Java 8 SDK path (required by Jenkins)
            update-alternatives --set java /usr/lib/jvm/jre-1.8.0-openjdk.x86_64/bin/java
            update-alternatives --set javac /usr/lib/jvm/java-1.8.0-openjdk.x86_64/bin/javac

  DynamoDBTestEnvironmentTable:
    Type: AWS::DynamoDB::Table
    # DependsOn:
    # DependedOn: IAMRoleTestEnvironmentLambdaExecution, TestEnvironmentLambdaFunction
    Properties:
      AttributeDefinitions:
      - AttributeName: JobBaseName
        AttributeType: "S"
      - AttributeName: BuildID
        AttributeType: "N"
      KeySchema:
      - AttributeName: JobBaseName
        KeyType: HASH
      - AttributeName: BuildID
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: SpotCICDWorkshopTestEnvironmentTracking

  EFSJenkinsHomeVolume:
    Type: AWS::EFS::FileSystem
    # DependsOn: None
    # DependedOn: AutoScalingECSLaunchConfiguration
    Properties:
      PerformanceMode: generalPurpose

  EFSMountTargetJenkinsHomeVolumeA:
    Type: AWS::EFS::MountTarget
    DependsOn: 
    - EFSJenkinsHomeVolume
    - SecurityGroupEFS
    - SubnetPublicA
    # DependedOn:
    Properties:
      FileSystemId: !Ref EFSJenkinsHomeVolume
      SecurityGroups:
      - !Ref SecurityGroupEFS
      SubnetId: !Ref SubnetPublicA

  EFSMountTargetJenkinsHomeVolumeB:
    Type: AWS::EFS::MountTarget
    DependsOn: 
    - EFSJenkinsHomeVolume
    - SecurityGroupEFS
    - SubnetPublicB
    # DependedOn:
    Properties:
      FileSystemId: !Ref EFSJenkinsHomeVolume
      SecurityGroups:
      - !Ref SecurityGroupEFS
      SubnetId: !Ref SubnetPublicB

  EFSMountTargetJenkinsHomeVolumeC:
    Type: AWS::EFS::MountTarget
    DependsOn: 
    - EFSJenkinsHomeVolume
    - SecurityGroupEFS
    - SubnetPublicC
    # DependedOn:
    Properties:
      FileSystemId: !Ref EFSJenkinsHomeVolume
      SecurityGroups:
      - !Ref SecurityGroupEFS
      SubnetId: !Ref SubnetPublicC

  ECSLaunchTemplate: # This is a launch template that will be used to provision ECS cluster nodes
    Type: AWS::EC2::LaunchTemplate
    DependsOn:
    - ECSAMILookupCustomResource
    - EFSJenkinsHomeVolume
    - InstanceProfileECS
    - SecurityGroupJenkins
    # DependedOn: None
    Properties:
      LaunchTemplateName: ECSLaunchTemplate
      LaunchTemplateData:
        BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize: 8
            VolumeType: gp2
        IamInstanceProfile: 
          Name: !Ref InstanceProfileECS
        ImageId: !GetAtt ECSAMILookupCustomResource.Id
        InstanceType: t3.medium
        KeyName: !Ref KeyPair
        SecurityGroupIds:
        - !Ref SecurityGroupJenkins
        TagSpecifications:
        - ResourceType: instance
          Tags:
          - Key: Name
            Value: ECS Cluster Instance
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            # Register instance with ECS cluster
            echo ECS_CLUSTER=SpotCICDWorkshopECSCluster >> /etc/ecs/ecs.config
            # Install all pending updates to the system
            yum -y update
            # Install the nfs-utils package
            yum -y install nfs-utils
            # Create EFS mountpoint
            mkdir /mnt/efs
            mkdir /mnt/efs/jenkins_home
            # Mount the Jenkins EFS volume
            mount -t nfs -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 $(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone).${EFSJenkinsHomeVolume}.efs.eu-west-1.amazonaws.com:/ /mnt/efs/jenkins_home
            # Deploy the AWS CLI
            yum -y install unzip wget
            wget -q https://s3.amazonaws.com/aws-cli/awscli-bundle.zip -O ./awscli-bundle.zip
            unzip ./awscli-bundle.zip
            ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
            # Register a custom attribute for this ECS host to indicate if this is a spot instance or not
            yum -y install jq
            INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            INSTANCE_LIFECYCLE=$(/usr/local/bin/aws ec2 describe-instances --region eu-west-1 --instance-ids $INSTANCE_ID | jq .Reservations | jq .[0] | jq .Instances | jq .[0] | jq .InstanceLifecycle | tr -d \")
            echo ECS_INSTANCE_ATTRIBUTES={\"lifecycle\": \"$INSTANCE_LIFECYCLE\"} >> /etc/ecs/ecs.config
            # If this is a spot instance, ensure that container draining occurs prior to interruption
            if [ $INSTANCE_LIFECYCLE == spot ]
              then
                wget -q https://s3-us-west-2.amazonaws.com/amazon-ec2-spot-cicd-workshop/interruption_check.sh -O ./interruption_check.sh
                chmod +x ./interruption_check.sh
                nohup ./interruption_check.sh &>/dev/null &
            fi 


  ECSCluster:
    Type: AWS::ECS::Cluster
    DependsOn: ECSServiceLinkedRole
    # DependedOn: ECSServiceJenkinsMaster
    Properties:
      ClusterName: SpotCICDWorkshopECSCluster

  ECSTaskDefinitionJenkinsMaster:
    Type: AWS::ECS::TaskDefinition
    DependsOn: ECSServiceLinkedRole
    # DependedOn:
    Properties:
      ContainerDefinitions:
      - Cpu: 512
        Essential: true
        Image: jenkins/jenkins:lts
        Memory: 1536
        MountPoints:
        - SourceVolume: JENKINS_HOME
          ContainerPath: /var/jenkins_home
        Name: SpotCICDWorkshopJenkinsMasterContainer
        PortMappings:
        - ContainerPort: 5000
          HostPort: 5000
        - ContainerPort: 8080
          HostPort: 8080
        - ContainerPort: 50000
          HostPort: 50000
      ExecutionRoleArn: !GetAtt IAMRoleJenkins.Arn
      NetworkMode: awsvpc
      PlacementConstraints:
      - Type: memberOf
        Expression: attribute:lifecycle != spot
      Volumes:
      - Host: 
          SourcePath: /mnt/efs/jenkins_home
        Name: JENKINS_HOME

  ECSServiceJenkinsMaster:
    Type: AWS::ECS::Service
    DependsOn: 
    - ECSCluster
    - ECSServiceLinkedRole
    - ECSTaskDefinitionJenkinsMaster
#    - IAMRoleECSServiceRole
    - JenkinsMasterALBListenerRuleECS
    - ServiceDiscoveryJenkinsMaster
#    # DependedOn: None
    Properties:
      Cluster: !Ref ECSCluster
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 50
      DesiredCount: 0
      HealthCheckGracePeriodSeconds: 120
      LoadBalancers:
      - ContainerName: SpotCICDWorkshopJenkinsMasterContainer
        ContainerPort: 8080
        TargetGroupArn: !Ref JenkinsMasterALBTargetGroupECS
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
          - !Ref SecurityGroupJenkins
          Subnets:
          - !Ref SubnetPrivateA
          - !Ref SubnetPrivateB
          - !Ref SubnetPrivateC
#      Role: !GetAtt IAMRoleECSServiceRole.Arn
#      ServiceName: JenkinsMaster
      ServiceRegistries:
      - ContainerName: SpotCICDWorkshopJenkinsMasterContainer
        RegistryArn: !GetAtt ServiceDiscoveryJenkinsMaster.Arn
      TaskDefinition: !Ref ECSTaskDefinitionJenkinsMaster

  ServiceDiscoveryJenkinsMasterNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    DependsOn: VPC
    # DependedOn: None
    Properties:
      Vpc: !Ref VPC
      Name: jenkins.local

  ServiceDiscoveryJenkinsMaster:
    Type: AWS::ServiceDiscovery::Service
    DependsOn: ServiceDiscoveryJenkinsMasterNamespace
    # DependedOn: ECSServiceJenkinsMaster
    Properties:
      Description: Jenkins Master Service
      DnsConfig:
        DnsRecords:
        - Type: A
          TTL: 60
        NamespaceId: !Ref ServiceDiscoveryJenkinsMasterNamespace
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: master

Outputs:
  DeploymentArtifactsS3Bucket:
    Description: The name of the S3 bucket where deployment artifacts are uploaded to.
    Value: !Ref DeploymentArtifactsS3Bucket

  EFSFileSystemID:
    Description: The file system ID of the EFS volume that is used to persist JENKINS_HOME across EC2 & ECS instances.
    Value: !Ref EFSJenkinsHomeVolume

  JenkinsDNSName:
    Description: The DNS name of the Application Load Balancer that is used to gain access to your Jenkins server.
    Value: !GetAtt JenkinsMasterALB.DNSName

  JenkinsIAMRoleARN:
    Description: The ARN associated with the IAM Role that was created for use by Jenkins.
    Value: !GetAtt IAMRoleJenkins.Arn

  JenkinsMasterSecurityGroup:
    Description: Security Group for Jenkins nodes. Use this value to configure Jenkins ECS Plugin
    Value: !Ref SecurityGroupJenkins 

  JenkinsVPCPublicSubnets:
    Description:  The public subnets where Jenkins will be deployed. Use this value to configure Jenkins ECS plugin
    Value: !Join [",", [!Ref SubnetPublicA, !Ref SubnetPublicB, !Ref SubnetPublicC]]
